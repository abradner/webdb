=render :partial => 'shared/modal_form', :locals => {:obj => @import_mapping, :modal_title => ("Preview This Import Mapping (" + @import_mapping.name + ")")}
.field.line
  %label Settings
  .lastUnit
    - if @raw_files
      = form_for @import_mapping, :url => preview_system_data_object_import_mapping_path(@system, @data_object, @import_mapping),:method => :post, :remote => true do |f|
        %div
          = f.label(:raw_file_id, "File To Preview")
          = f.select(:raw_file_id, options_from_collection_for_select(@raw_files, :id, :name))
        %div
          = f.label :delimiter, "Delimiter"
          = f.select :delimiter, options_for_select(ImportMapping::DELIMITERS, @delimiter)
        %div
          = label_tag :includes_header, "First Row Contains Field Names?"
          = check_box_tag :includes_header, 1, @includes_header
        %div
          = f.submit "Preview File"
    - else
      No files were detected in the system.
      
- if @raw_file
  .field.line
    %label
      = "File Preview : #{@raw_file.name} with '#{@delimiter}' as the delimiter, "
      = @includes_header ? "with": "without"
      = " headers"
    = render :partial => "file_preview", :locals => {:csv => @csv}
  .field.line

  #bin
  #attr_list
    .field.line

    %label Please drag the attributes below and place them under the appropriate headers
    - @unassigned_attrs.each do |attr|
      %p.draggable{"data_id" => attr.id, :class => ["icon_field", field_css_class(attr.attribute_type)] } #{attr.label}#{"*" if attr.required?}
- else
  .field.line
    %label
      = "File Preview : None selected"

  .lastUnit

- if @raw_file
  = form_for [@system, @data_object, @import_mapping], :remote => true, :html => {:id => "mapping_form"} do |f|
    = f.hidden_field(:includes_header, :value => @includes_header) if @includes_header.present?
    = f.hidden_field(:delimiter, :value => @delimiter) if @delimiter.present?
    = f.hidden_field(:raw_file_id, :value => @raw_file.id) if @raw_file.present?
    = f.hidden_field(:num_of_columns, :value => @num_of_columns) if @num_of_columns.present?
    - if @includes_header.present?
      - @csv[:header].each do |cell|
        = hidden_field_tag "import_mapping[header_row][]", cell

    #hidden_values
      -# gets updated by javascript during auto mapping of fields
      = f.hidden_field(:mappings, :value => []) if params[:import_mapping].present?
    .field.line
      %label The following fields will identify the record and must be mapped
      .line#required_attrs
        - @id_attrs.each do |attr|
          = hidden_field_tag "import_mapping[unique_fields][]", attr.id
          %p #{attr.label}
    .field.line
      %label Choose additional fields to validate uniqueness on (ctrl + click to select multiple fields)
      .line
        = f.collection_select(:unique_fields, @non_id_attrs, :id, :name, {}, {:multiple => true})

    .field.line
      %label Choose what action to use
      .line
        = f.select(:action, options_for_select(ImportMapping::ACTIONS, @import_mapping.action))

    #bottom_actions_container
      .field.line
        .field.actions
          = button_link_to "Back", system_data_object_import_mappings_path(@system, @data_object), :remote => true
          = f.submit "Save Mappings"
- else
  #bottom_actions_container
  .field.line
    .field.actions
      = button_link_to "Back", system_data_object_import_mappings_path(@system, @data_object), :remote => true


:javascript
  jQuery(function() {

    $(document).ready(function(){
      updateHiddenValues();
    });

    function updateHiddenValues(){
      $('#hidden_values').empty();
      $('.draggable', '#file_preview').each(function(index) {
        //
        if ($(this).css('display') != "none"){

          $('<input>').attr({
              id : $(this).parent().attr('id'),
              name : 'import_mapping[mappings][' + $(this).parent().attr('id') + ']',
              type : "hidden",
              value : $(this).attr('data_id')
          }).appendTo('#hidden_values');
        }

      });
    }

    $('.draggable').draggable({
        revert:true,
        helper:'clone',
        opacity: 0.5
    });

    $('#bin').droppable({
        activeClass: 'dropActive',

        accept: function(d) {
          if(d.parent().attr('id') != "attr_list"){
            return true;
          }
        },

        drop: function(event,ui){

          event.stopPropagation();
          ui.helper.hide();
          var $drag = $(ui.draggable),
              $drop = $(this),
              $data = {};
          $(this).css('backgroundColor', "#D7D5D3");
          $(this).html('');

          $('#attr_list').append($drag);
          updateHiddenValues();
        },

        activate: function(event, ui) {
          $(this).css('backgroundColor', "pink");
          $(this).html('Drop here to remove attribute mapping');
        },
        
        deactivate: function(event, ui) {
          $(this).css('backgroundColor', "#D7D5D3");
          $(this).html('');

        }

    });



    $('.column').droppable({
        activeClass: 'dropActive',
        accept: function(d) {
          if($(this).html() == "" ){
            return true;
          }
        },

        drop: function(event,ui){

          event.stopPropagation();
          ui.helper.hide();
          var $drag = $(ui.draggable),
              $drop = $(this),
              $data = {};

          $(this).html($drag);
          $(this).css('backgroundColor', "#DDDDDD");
          $(this).css('color', "black");
          updateHiddenValues();
        },

        over: function(event, ui) {
          $(this).css('backgroundColor', "lime");
          $(this).css('color', "#DDDDDD");
        },
        
        out: function(event, ui) {
          $(this).css('backgroundColor', "#DDDDDD");
          $(this).css('color', "black");
        }
    });

  });

